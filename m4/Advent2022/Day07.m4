;;Advent2022/Day07.m4
include(`stdHeaders.m4')

_gnts(`gChildren',`children')
_gnts(`gParent',`parent')
_gnts(`gcd',`$ cd ')
_gnts(`gDir',`dir')
_gnts(`gFile',`file')
_gnts(`gls', `$ ls')
_gnts(`gName', `name')
_gnts(`gLength', `length')
_gnts(`gSlash',`/')
_gnts(`gType',`type')
_gnts(`gDol', `$')

(global $strChildren (mut i32) _0);;'children'
(global $strCd (mut i32) _0)	;; 'cd'
(global $strDir (mut i32) _0)	;; 'dir'
(global $strFile (mut i32) _0)	;; 'file'
(global $strLs (mut i32) _0)	;; 'ls'
(global $strName (mut i32) _0)	;; 'name'
(global $strParent (mut i32) _0);; 'parent'
(global $strLength (mut i32) _0)  ;; 'length'
(global $strSlash (mut i32) _0)	;; '/'
(global $strType (mut i32) _0)	;; 'type'
(global $strDol (mut i32) _0)	;; '$'
(global $pushed (mut i32) _0)

(global $curDir (mut i32) _0)

(func $mkDir (param $name i32)(param $parent i32)(result i32)
  (local $dir i32)
  _testString(`g$mkDir',`in $mkDir')
  (local.set $dir (call $strMap.mk))
  (call $map.set(local.get $dir)(global.get $strParent)  (local.get $parent))
  (call $map.set(local.get $dir)(global.get $strType)	 (global.get $strDir))
  (call $map.set(local.get $dir)(global.get $strName)	 (local.get $name))
  (call $map.set(local.get $dir)(global.get $strChildren)(call $i32list.mk))
  (call $map.set(local.get $dir)(global.get $strParent)  (local.get $parent))
  (local.get $dir)
)
(func $initFileSystem (result i32) ;; returns the initialized root directory
  (local $root i32)
  (global.set $strCd (call $str.mkdata (global.get $gcd)))
  (global.set $strChildren (call $str.mkdata (global.get $gChildren)))
  (global.set $strParent (call $str.mkdata (global.get $gParent)))
  (global.set $strDir (call $str.mkdata (global.get $gDir)))
  (global.set $strFile (call $str.mkdata (global.get $gFile)))
  (global.set $strLs (call $str.mkdata (global.get $gls)))
  (global.set $strName (call $str.mkdata (global.get $gName)))
  (global.set $strLength (call $str.mkdata (global.get $gLength)))
  (global.set $strSlash (call $str.mkdata (global.get $gSlash)))
  (global.set $strType (call $str.mkdata (global.get $gType)))
  (global.set $strDol (call $str.mkdata (global.get $gDol)))
  (global.set $pushed (call $str.mk))
  (local.set $root (call $mkDir (global.get $strSlash) _0))  ;;null parent
  (local.get $root)
)
(func $fileSystemToStr (param $root i32)(result i32)
   ;; strMap's toStr won't work because of circular references
  (local $strPtr i32)(local $parent i32)
  (local.set $strPtr (call $str.mk))
  (call $str.catStr (local.get $strPtr)(global.get $strType))
 (call $str.catByte (local.get $strPtr) _CHAR(`:'))
 (call $str.catStr (local.get $strPtr) (call $map.get(local.get $root)(global.get $strType)))
  (call $str.catByte (local.get $strPtr) _LF)
  (call $str.catStr (local.get $strPtr)(global.get $strName))
  (call $str.catByte (local.get $strPtr) _CHAR(`:'))
  (call $str.catStr (local.get $strPtr) (call $map.get(local.get $root)(global.get $strName)))
  (call $str.catByte (local.get $strPtr) _LF)
  (call $str.catStr (local.get $strPtr)(global.get $strParent))
  (call $str.catByte (local.get $strPtr) _CHAR(`:'))
  (local.set $parent (call $map.get (local.get $root)(global.get $strParent)))
  (if (i32.eqz (local.get $parent))
	(call $str.catStr (local.get $strPtr)(global.get $strSlash))
  (else
	(call $str.catStr (local.get $strPtr)(call $map.get (local.get $parent)(global.get $strName)))
  ))
  (call $str.catByte (local.get $strPtr) _LF)
  (call $str.catStr (local.get $strPtr)(global.get $strChildren))
  (call $str.catByte (local.get $strPtr) _CHAR(`:'))
  (call $str.catStr (local.get $strPtr)(call $childrenToStr(call $map.get(local.get $root)(global.get $strChildren))))
 (call $str.catByte (local.get $strPtr) _LF)
  (local.get $strPtr)
)
(func $cdCommand (param $root i32)(param $line i32)(result i32)
  (local $cdName i32)(local $children i32)(local $child i32)
  (local $numChildren i32)(local $childNum i32)
  _testString(`gcdCommand',`in $cdCommand')
  (local.set $cdName
	(call $str.mkslice
	  (local.get $line) _5 (i32.sub (call $str.getByteLen(local.get $line)) _5)))
  _testString(`gcdto',`cdCommand:')(call $printwlf(local.get $cdName))
  (if (call $str.compare
		(local.get $cdName)
		(call $map.get (local.get $root)(global.get $strName)))
	(then _testString(`galready',`cd already there!')
	    (return (local.get $root))))
  _testString(`gneedtochange',`need to change directory')
  (local.set $childNum _0)
  (local.set $children (call $map.get(local.get $root)(global.get $strChildren)))
  (local.set $numChildren (call $i32list.getCurLen(local.get $children)))
  (loop $childLoop
    (if (i32.lt_s (local.get $childNum)(local.get $numChildren))
	  (then
	    (local.set $child (call $i32list.get@ (local.get $children)(local.get $childNum)))
		_testString(`glookingfor',`looking for child with right name')
	    (if (call $str.compare
		  (local.get $cdName)
		  (call $map.get (local.get $child)(global.get $strName)))
		  (then
			_testString(`gfoundname',`found name for $cdCommand')
			(call $printwlf (local.get $child))
			(return (local.get $child))
		  )
		)
	  )
	)
  )
  (local.get $root)
)
(func $childrenToStr (param $childList i32)(result i32)
  (local $child i32)(local $numChildren i32)(local $childNum i32)
  (local $strPtr i32)
  (local.set $strPtr (call $str.mk))
  (local.set $numChildren (call $i32list.getCurLen (local.get $childList)))
  (call $str.catByte (local.get $strPtr) _CHAR(`['))
  (local.set $childNum _0)
  (loop $childLoop
	(if (i32.lt_s (local.get $childNum)(local.get $numChildren))
	  (then
	    (local.set $child (call $i32list.get@(local.get $childList)(local.get $childNum)))
		(call $str.catStr (local.get $strPtr)
	      (call $map.get (local.get $child)(global.get $strName)))
		(call $str.catByte (local.get $strPtr) _SP)
		_incrLocal($childNum)
		(br $childLoop))))
  (call $str.catByte (local.get $strPtr) _CHAR(`]'))
  (local.get $strPtr)
)
(func $dirCommand (param $root i32)(param $line i32)
  (local $dirName i32)(local $newDir i32)(local $rchildren i32)
  _testString(`gdirCommand',`in $dirCommand')
  (local.set $dirName
	(call $str.mkslice (local.get $line) _4 
		(i32.sub (call $str.getByteLen(local.get $line)) _4)))
  (local.set $newDir (call $mkDir (local.get $dirName)(local.get $root)))
  (call $printwlf (call $fileSystemToStr(local.get $newDir)))
  (local.set $rchildren (call $map.get (local.get $root)(global.get $strChildren)))
  ;;(call $printwlf (call $childrenToStr(local.get $rchildren)))
  (call  $i32list.push (local.get $rchildren)(local.get $newDir))
)
(func $addFile (param $root i32)(param $line i32)
  (local $splits i32)(local $fileLength i32)(local $fileName i32)(local $file i32)
  _testString(`gaddFile',`adding a file')
  (local.set $splits (call $str.Csplit(local.get $line) _SP))
  (local.set $fileLength (call $str.toI32 (call $i32list.get@(local.get $splits) _0)))
  ;;(call $i32.print (local.get $fileLength))(call $printlf)
  (local.set $fileName (call $i32list.get@ (local.get $splits) _1))
  ;;(call $str.print (local.get $fileName))(call $printlf)
  (local.set $file (call $strMap.mk))
  (call $map.set(local.get $file)(global.get $strType)(global.get $strFile))
  (call $map.set(local.get $file)(global.get $strName)(local.get $fileName))
  (call $map.set(local.get $file)(global.get $strLength)(local.get $fileLength))
  (call $i32list.push  ;; the file object is a new child to the directory passed as 'root'
	(call $map.get (local.get $root)(global.get $strChildren))
	(local.get $file))
)
(func $Day07a (export "_Day07a")
  (local $line i32)(local $lineTerm i32)
  (local $root i32) ;; root of directory structue
  (local $curDir i32)
  (local.set $root (call $initFileSystem))
  (local.set $curDir (local.get $root))
  (call $printwlf (call $fileSystemToStr(local.get $curDir)))
  (local.set $line (call $str.mk))  ;; string object reused in $lineLoop
  (loop $lineLoop
	(call $printwlf (call $fileSystemToStr(local.get $root)))
	(local.set $lineTerm (call $str.readIntoStr (local.get $line)))
	(call $printwlf (local.get $line))
	;;(local.set $root (call $parseLine (local.get $root)(local.get $line)))
    (if (call $str.startsAt (local.get $line)(global.get $strCd) _0)
	  (then
		(local.set $curDir (call $cdCommand(local.get $curDir)(local.get $line)))
		(br $lineLoop)))
	(if (call $str.startsAt (local.get $line)(global.get $strLs) _0)
		(then (br $lineLoop)))  ;; doesn't do anything yet?
	(if (call $str.startsAt (local.get $line)(global.get $strDir) _0)
		(then
		  (call $dirCommand (local.get $curDir)(local.get $line))
		  (br $lineLoop)))
	(call $addFile(local.get $curDir)(local.get $line))
	(if (i32.eq (local.get $lineTerm) _maxNeg)
	  (return))
	(br $lineLoop)
  )
)
include(`../moduleTail.m4')
