;;Advent2022/Day07.m4
include(`stdHeaders.m4')
(;;
_gnts(`gChildren',`Children')
_gnts(`gcd',`$ cd ')
_gnts(`gDir',`Dir')
_gnts(`gFile',`File')
_gnts(`gls', `$ ls')
_gnts(`gName', `Name')
_gnts(`gSlash',`/')
_gnts(`gType',`Type')
_gnts(`gParent',`..')
_gnts(`gDol', `$')

(global $strChildren (mut i32) _0)
(global $strCd (mut i32) _0)
(global $strDir (mut i32) _0)
(global $strFile (mut i32) _0)
(global $strLs (mut i32) _0)
(global $strName (mut i32) _0)
(global $strParent (mut i32) _0)
(global $strSlash (mut i32) _0)
(global $strType (mut i32) _0)
(global $strDol (mut i32) _0)
(global $pushed (mut i32) _0)

(global $curDir (mut i32) _0)
;;)
(func $mkDir (param $name i32)(param $parent i32)(result i32)
  (local $dir i32)
  _testString(`g$mkDir',`in $mkDir')
(;;
  (call $printwlf (local.get $name))
  (call $printwlf (local.get $parent))
  (local.set $dir (call $strMap.mk))
  (call $map.set
    (local.get $dir)
	(global.get $strType)
	(global.get $strDir))
  (call $map.set
    (local.get $dir)
	(global.get $strName)
	(local.get $name))
  (call $map.set
	  (local.get $dir)
	  (global.get $strChildren)
	  (call $i32list.mk))
  (call $map.set
	  (local.get $dir)
	  (global.get $strParent)
	  (local.get $parent))
;;)
  (local.get $dir)
)
(func $initFileSystem (result i32) ;; returns the initialized root directory
  (local $root i32)
(;;
  (call $printwlf (local.get $root))
  (global.set $strCd (call $str.mkdata (global.get $gcd)))
  (global.set $strChildren (call $str.mkdata (global.get $gChildren)))
  (global.set $strDir (call $str.mkdata (global.get $gDir)))
  (global.set $strFile (call $str.mkdata (global.get $gFile)))
  (global.set $strLs (call $str.mkdata (global.get $gls)))
  (global.set $strName (call $str.mkdata (global.get $gName)))
  (global.set $strParent (call $str.mkdata (global.get $gParent)))
  (global.set $strSlash (call $str.mkdata (global.get $gSlash)))
  (global.set $strType (call $str.mkdata (global.get $gType)))
  (global.set $strDol (call $str.mkdata (global.get $gDol)))
  (global.set $pushed (call $str.mk))
  (local.set $root (call $mkDir (global.get $strSlash) _0))  ;;null parent
  (call $map.set(local.get $root)(global.get $strParent)(local.get $root)) ;; it's own parent
;;)
  (local.get $root)
)
(;;
(func $fileSystemToStr (param $root i32)(result i32)
   ;; strMap's toStr won't work because of circular references
  (local $strPtr i32)
  (local.set $strPtr (call $str.mk))
  (call $str.catStr (local.get $strPtr)(global.get $strType))
  (call $str.catByte (local.get $strPtr) _CHAR(`:'))
  (call $str.catStr (local.get $strPtr) (call $map.get(local.get $root)(global.get $strType)))
  (call $str.catByte (local.get $strPtr) _LF)
  (call $str.catStr (local.get $strPtr)(global.get $strName))
  (call $str.catByte (local.get $strPtr) _CHAR(`:'))
  (call $str.catStr (local.get $strPtr) (call $map.get(local.get $root)(global.get $strName)))
  (call $str.catByte (local.get $strPtr) _LF)

  (call $str.catStr (local.get $strPtr)(global.get $strChildren))
  (call $str.catByte (local.get $strPtr) _CHAR(`:'))
  (call $str.catStr (local.get $strPtr) (call $map.get(local.get $root)(global.get $strChildren)))
  ;;(call $printwlf(local.get $strPtr))
  (call $str.catByte (local.get $strPtr) _LF)
  (local.get $strPtr)
)
;;)
(func $handleCD (param $root i32)(param $line i32)
(;;
  (local $cdName i32)
  _testString(`ghandleCD',`in $handleCD')
  (local.set $cdName
	(call $str.mkslice (local.get $line) _5 
		(i32.sub (call $str.getByteLen(local.get $line) _5))))
  (call $printwlf (local.get $cdName))
;;)
)
(func $handleDir (param $root i32)(param $line i32)
(;;
  (local $dirName i32)
  _testString(`ghandleDir',`in $handleDir')
  (local.set $dirName
	(call $str.mkslice (local.get $line) _4 
		(i32.sub (call $str.getByteLen(local.get $line) _4))))
  (call $printwlf (local.get $dirName))
;;)
)
(func $handleLs (param $root i32)(param $line i32)
(;;  (local $dirName i32)(local $lineTerm i32)
  _testString(`ghandleLs',`in $handleLs')
  (loop $lineLoop
	(local.set $lineTerm (call $str.readIntoStr (local.get $line)))
	(call $printwlf (local.get $line))
	(if (i32.eq _DOLLAR (call $str.getByte(local.get $line) _0))
	  (then return))
	_testString(`ghandling',`ls handling line')
	(global.set $pushed (local.get $line))
		(return))
;;)
)	
(func $parseLine (param $root i32)(param $line i32)
(;;
  _testString(`ginparseline',`in parseLine')
  (call $printwlf(local.get $line))
  (if (call $str.startsAt (local.get $line)(global.get $strCd) _0)
	(then (call $handleCD(local.get $root)(local.get $line))))
  (if (call $str.startsAt (local.get $line)(global.get $strLs) _0)
	(then (call $handleLs (local.get $root)(local.get $line))))
  (if (call $str.startsAt (local.get $line)(global.get $strDir) _0)
	(then (call $handleDir (local.get $root)(local.get $line))))
;;)
)
(func $day07a (export "_Day07a")
(;;  (local $line i32)(local $lineTerm i32)
  (local $root i32) ;; root of directory structue
  (local.set $root (call $initFileSystem))
  ;;(call $printwlf (call $fileSystemToStr(local.get $root)))
  (local.set $line (call $str.mk))  ;; reused in $lineLoop
  (loop $lineLoop
	(local.set $lineTerm (call $str.readIntoStr (local.get $line)))
	(call $printwlf (local.get $line))
	(call $parseLine (local.get $root)(local.get $line))
	(if (i32.ne (local.get $lineTerm) _maxNeg)
	  (br $lineLoop))
  )
;;)
)
include(`../moduleTail.m4')
